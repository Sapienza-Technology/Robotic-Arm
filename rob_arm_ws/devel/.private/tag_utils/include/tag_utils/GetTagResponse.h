// Generated by gencpp from file tag_utils/GetTagResponse.msg
// DO NOT EDIT!


#ifndef TAG_UTILS_MESSAGE_GETTAGRESPONSE_H
#define TAG_UTILS_MESSAGE_GETTAGRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tag_utils
{
template <class ContainerAllocator>
struct GetTagResponse_
{
  typedef GetTagResponse_<ContainerAllocator> Type;

  GetTagResponse_()
    : tag()  {
      tag.assign(0.0);
  }
  GetTagResponse_(const ContainerAllocator& _alloc)
    : tag()  {
  (void)_alloc;
      tag.assign(0.0);
  }



   typedef boost::array<float, 3>  _tag_type;
  _tag_type tag;





  typedef boost::shared_ptr< ::tag_utils::GetTagResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tag_utils::GetTagResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetTagResponse_

typedef ::tag_utils::GetTagResponse_<std::allocator<void> > GetTagResponse;

typedef boost::shared_ptr< ::tag_utils::GetTagResponse > GetTagResponsePtr;
typedef boost::shared_ptr< ::tag_utils::GetTagResponse const> GetTagResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tag_utils::GetTagResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tag_utils::GetTagResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tag_utils::GetTagResponse_<ContainerAllocator1> & lhs, const ::tag_utils::GetTagResponse_<ContainerAllocator2> & rhs)
{
  return lhs.tag == rhs.tag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tag_utils::GetTagResponse_<ContainerAllocator1> & lhs, const ::tag_utils::GetTagResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tag_utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tag_utils::GetTagResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tag_utils::GetTagResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tag_utils::GetTagResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tag_utils::GetTagResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tag_utils::GetTagResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tag_utils::GetTagResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tag_utils::GetTagResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "437562c37a0b78009dd646ef9093b67f";
  }

  static const char* value(const ::tag_utils::GetTagResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x437562c37a0b7800ULL;
  static const uint64_t static_value2 = 0x9dd646ef9093b67fULL;
};

template<class ContainerAllocator>
struct DataType< ::tag_utils::GetTagResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tag_utils/GetTagResponse";
  }

  static const char* value(const ::tag_utils::GetTagResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tag_utils::GetTagResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[3] tag\n"
"\n"
;
  }

  static const char* value(const ::tag_utils::GetTagResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tag_utils::GetTagResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetTagResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tag_utils::GetTagResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tag_utils::GetTagResponse_<ContainerAllocator>& v)
  {
    s << indent << "tag[]" << std::endl;
    for (size_t i = 0; i < v.tag.size(); ++i)
    {
      s << indent << "  tag[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.tag[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TAG_UTILS_MESSAGE_GETTAGRESPONSE_H
